# interpreter for shell commands
set shell pwsh.exe

# enable options
set icons
set hidden!
set info size:time

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
# set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
# set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

map w ${{
    pwsh -workingdirectory ($env:f -replace '"', '')
}}

map e edit
cmd edit ${{
    nvim ($env:fx -replace '"','') 
}}

# show the result of execution of previous commands
# map ` !true

# execute current file (must be executable)
map x $$env:f


# inspect file
map i inspect
cmd inspect ${{
    less ($env:fx -replace '"', '')
}}

# dedicated keys for file opener actions
map O open
map o open_file
cmd open_file ${{
    start $env:fx
}}

# mkdir command. See wiki if you want it to select created dir
map A :push %mkdir<space>
map a :push %touch<space>


# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash !{{
#     $path = $env:fx -replace '"', ''
#     echo $path
#     mv $path C:\$Recycle.Bin
# }}

# define a custom 'delete' command
map D delete
cmd delete ${{
    $ans = read-host "delete $env:fx [y/n]?"
    if($ans -eq "y"){
        rm ($env:fx -replace '"','')
    }
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    # set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    # set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    # set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
